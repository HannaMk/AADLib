theorem check_aadl
  foreach s in system_set do
     requires (check_data_model_annex);
  check (1=1);
end check_aadl;


----------------------------------------------------------------------------
----------------------------------------------------------------------------
----------------------------------------------------------------------------
--theorem per_thread

  --foreach e in Thread_Set do
 
  --check (Get_Property_Value(e, "dispatch_protocol") = "Periodic");
 
--end per_thread;

  ----------------------------------------------------------------------------

 theorem collection
  foreach e in memory_set do
  check (Property_Exists(e,"priority"));
  end collection;
  
  ----------------------------------------------------------------------------
  
  theorem periodic_thread
  
  foreach e in Thread_Set do
  
 check (Get_Property_Value(e, "dispatch_protocol") = "Periodic");
 
end periodic_thread;

----------------------------------------------------------------------------

theorem subprogram_execution

foreach e in Process_Set do

 check (Get_Property_Value(e, "Priority") < 3);
 
end  subprogram_execution; 

----------------------------------------------------------------------------

theorem check_processor

	foreach e in processor_set do
	
	check (cardinal(processor_set) = 1);
	
end check_processor;

----------------------------------------------------------------------------

theorem UniqueCall

foreach e in Subprogram_Set do

	Callers(e) := {t in Thread_Set | Is_Called_By(e,t)};
	
check ( Cardinal (Callers) = 1) ;

end UniqueCall ;

----------------------------------------------------------------------------

  theorem example
  
  foreach e in thread_set do
  
  check (Property_Exists(e,"Compute_Execution_time"));
  
 -- return (Get_Property_Value(e,"Compute_Execution_time"));
 
  end example;
  
  ----------------------------------------------------------------------------
  
  theorem value
  
  foreach e in thread_set do
  
  var period := Get_Property_Value (e, "period");
  
  var priority := Get_Property_Value (e, "priority");
  
  return (MSum(period + Priority));
  
  end value; 
  
  ----------------------------------------------------------------------------
  
  
  theorem range
  
  foreach e in thread_set do
  
  var Cet := Last(Property(e, "Compute_Execution_time"));
  
  return(MSum(Cet));
  
  end range ;

  ----------------------------------------------------------------------------

--theorem rma

--foreach e in Processor_Set do

--  Proc_Set(e) := {x in Process_Set | Is_Bound_To (x, e)};

--  Threads := {x in Thread_Set | Is_Subcomponent_Of (x, Proc_Set)};
  
  --var C_sur_T := 

--  check (sum (get_property_value (Threads, "period")) <=
--           (Cardinal (Threads) * (2 ** (1 / Cardinal (Threads))) -1));

--end rma;
