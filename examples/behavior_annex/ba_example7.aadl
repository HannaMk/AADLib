-- Following example shows the use of a LSER call between a client thread
-- and a server thread. The client thread does not need to wait for the
-- completion of the call to a long remote calculation. Result value is later
-- returned thanks to a HSER subprogram call to the server.

package BA_example7
public
  with Base_Types;
--  with Behavior_Properties; -- JH

  process client_server
  end client_server;

  process implementation client_server.i
  subcomponents
    c : thread a_client;
    s : thread a_server.i;
  connections
    T1:subprogram access s.long -> c.pre;
    T2:subprogram access s.short -> c.post;
  end client_server.i;

  thread a_client
  features
    pre : requires subprogram access long_computation;
    post : requires subprogram access send_result;
  properties
    Dispatch_Protocol => Periodic;
    Period => 200ms;
    annex behavior_specification {**
    variables
    x : result_type;
    states
    s : initial complete final state;
    transitions
    s -[ on dispatch ]-> s { pre!; computation(60ms); post!(x) };
    **};
  end a_client;

  thread a_server
  features
    long : provides subprogram access long_computation;
--    { Behavior_Properties::Subprogram_Call_Protocol => LSER; };
    short : provides subprogram access send_result;
--    { Behavior_Properties::Subprogram_Call_Protocol => HSER; };
  properties
    Dispatch_Protocol => Sporadic;
  end a_server;

  thread implementation a_server.i
  subcomponents
    local_result : data result_type.i;
-- XXX
-- connections
--     T3:subprogram access local_result -> long;
--     T4:subprogram access local_result -> short;
  annex behavior_specification {**
    states
    s0 : initial complete final state;
    s1 : complete state;
    s2 : state;
    transitions
    s0 -[ on dispatch long ]-> s1;
    s1 -[ ]-> s2 { long_computation!; local_result.status := 1 } timeout 60ms;
    s1 -[ on dispatch timeout ]-> s2 { local_result.status := 0 }; -- JH
    s2 -[ on dispatch short ]-> s0 { send_result!(local_result) };
    **};
  end a_server.i;

  subprogram long_computation
  features
    result : requires data access result_type.i;
    -- LSER subprograms cannot have out parameters
    -- do some long calculation and update result locally
  end long_computation;

  subprogram send_result
  features
    result : requires data access result_type.i;
    output : out parameter result_type;
    -- HSER subprograms can have out parameters
    -- return result to client
  end send_result;

  data result_type
  end result_type;

  data implementation result_type.i
  subcomponents
    contents : data Base_Types::Integer;
    status : data Base_Types::Boolean;
  end result_type.i;

end BA_example7;
