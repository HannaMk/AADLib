package mars_pathfinder 
public 

----------------------------------------------------------
----------------------threads-----------------------------
----------------------------------------------------------
thread bus_scheduling	
	-- bus control task
	features
	control_data	: out data port control_data;
		
	properties
	Dispatch_protocol		=> periodic;
	period			 		=> 125 ms;
	compute_execution_time	=> 0 ms .. 25 ms;
	deadline				=> 125 ms;
	priority				=> 7;
		
end bus_scheduling;

thread data_distribution	
	-- 1553 bus control
	features 
	req_data_rw 	: requires data access data_rw;
	measured_data	: in data port measured_data;
	
	properties
	Dispatch_protocol		=> periodic;
	period			 		=> 125 ms;
	compute_execution_time	=> 0 ms .. 25 ms;
	deadline				=> 125 ms;
	priority				=> 6;
end data_distribution;

thread control_task	
	-- rover control task
	features 
	req_data_rw : requires data access data_rw;
	
	properties
	Dispatch_protocol		=> periodic;
	period			 		=> 250 ms;
	compute_execution_time	=> 0 ms .. 25 ms;
	deadline				=> 250 ms;
	priority				=> 5;
end control_task;

thread radio_task	
	-- radio communication management task
	features
	reception_data	: in data port reception_data;
	emission_data	: out data port emission_data;
	
	properties
	Dispatch_protocol		=> periodic;
	period			 		=> 250 ms;
	compute_execution_time	=> 0 ms .. 25 ms;
	deadline				=> 250 ms;
	priority				=> 4;
end radio_task;

thread camera_task	
	-- camera control task
	features
	images_data		: in data port images_data;	
	camera_control	: out data port camera_control;	
	
	properties
	Dispatch_protocol		=> periodic;
	period			 		=> 250 ms;
	compute_execution_time	=> 0 ms .. 25 ms;
	deadline				=> 250 ms;
	priority				=> 3;
end camera_task;

thread mesure_task	
	-- mesurement task
	features 
	req_data_rw : requires data access data_rw;
	
	properties
	Dispatch_protocol		=> periodic;
	period			 		=> 5000 ms;
	compute_execution_time	=> 0 ms .. 50 ms;
	deadline				=> 5000 ms;
	priority				=> 2;
end mesure_task;

thread meteo_task	
	-- meteorological data task
	features 
	req_data_rw : requires data access data_rw;
	
	properties
	Dispatch_protocol		=> periodic;
	priority				=> 1;
	period			 		=> 5000 ms;
	deadline				=> 5000 ms;
	compute_execution_time	=> 0 ms .. 50 ms;
	--to analysis with
--	compute_execution_time	=> 0 ms .. 75 ms; -- depend on data communication size

end meteo_task;
-----------------------------------------------------------------
-------------------------devices---------------------------------
-----------------------------------------------------------------
device camera
	features
	camera_control	: in data port camera_control;
	images_data		: out data port images_data;
	bus_1553		: requires bus access bus_1553;
	
end camera;

device radio
	features
	emission_data	: in data port emission_data;
	reception_data	: out data port reception_data;
	bus_1553		: requires bus access bus_1553;
	
end radio;

device thrusters
	features
	measured_data	: out data port measured_data;
	bus_1553		: requires bus access bus_1553;
	
end thrusters;

device valves
	features
	measured_data	: out data port measured_data;
	bus_1553		: requires bus access bus_1553;
	
end valves;

device sun_sensors
	features
	measured_data	: out data port measured_data;
	bus_1553		: requires bus access bus_1553;
	
end sun_sensors;

device star_analyser
	features
	measured_data	: out data port measured_data;
	bus_1553		: requires bus access bus_1553;
	
end star_analyser;

device altimeter
features
	measured_data	: out data port measured_data;
	bus_1553		: requires bus access bus_1553;
end altimeter;

device accelerometer
features
	measured_data	: out data port measured_data;
	bus_1553		: requires bus access bus_1553;
	
end accelerometer;

device meteorological
features
	measured_data	: out data port measured_data;
	bus_1553		: requires bus access bus_1553;
	
end meteorological;

device interface
	features 
	req_access_vme 	: requires bus access VME;
	req_access_1553 : requires bus access bus_1553;
	control_data 	: in data port control_data;
	
	properties
	device_driver => classifier (bus_interface);
	
end interface;



-----------------------------------------------------------------
---------------------------datas---------------------------------
-----------------------------------------------------------------
data data_rw	
	-- critical resource
	properties
	Concurrency_Control_Protocol => None_Specified;
	-- to analysis with
--	Concurrency_Control_Protocol => Priority_Inheritance;
--	Concurrency_Control_Protocol => Priority_Ceiling;
end data_rw;

data control_data end control_data;

data images_data end images_data;

data camera_control end camera_control;

data reception_data end reception_data;

data emission_data end emission_data;

data measured_data end measured_data;
------------------------------------------------------------------
-----------------------buses--------------------------------------
------------------------------------------------------------------
bus VME
features 
pro_access_vme: provides bus access VME;

end VME;

bus bus_1553
features 
pro_access_1553: provides bus access bus_1553;

end bus_1553;
------------------------------------------------------------------
-----------------------memories-----------------------------------
------------------------------------------------------------------

memory memories
end memories;

-------------------------------------------------------------------
-----------------------processes-------------------------------------
-------------------------------------------------------------------
process PSC		
-- pathfinder spacecraft control

	
end PSC;

process implementation PSC.impl
	subcomponents
	bus_interface	: abstract bus_interface;	
	
end PSC.impl;

abstract bus_interface	
features
	pro_data_rw		:provides data access data_rw;
	
	camera_control	: out data port camera_control;
	emission_data	: out data port emission_data;
	control_data	: out data port control_data;
	
	reception_data	: in data port reception_data;
	images_data		: in data port images_data;
	measured_data	: in data port measured_data;
end bus_interface;

abstract implementation bus_interface.impl
	end bus_interface.impl;

process prs_bus_interface extends bus_interface	
	end prs_bus_interface;
		
	process implementation prs_bus_interface.impl extends bus_interface.impl
	subcomponents
	bus_scheduling		: thread bus_scheduling;
	data_distribution	: thread data_distribution;
	control_task		: thread control_task;
	radio_task			: thread radio_task;
	camera_task			: thread camera_task;
	mesure_task			: thread mesure_task;
	meteo_task			: thread meteo_task;
	
	data_rw				: data data_rw;		-- critical ressource 
	
	connections
	-- by default access is required for the duration of the thread execution
	C1: data access pro_data_rw -> data_distribution.req_data_rw;
	C2: data access pro_data_rw -> control_task.req_data_rw;
	C3: data access pro_data_rw -> mesure_task.req_data_rw;
	C4: data access pro_data_rw -> meteo_task.req_data_rw;
	
	C5: port bus_scheduling.control_data	-> control_data;
	C6: port camera_task.camera_control 	-> camera_control;
	C7: port radio_task.emission_data		-> emission_data ;
	
	C8: port images_data	-> camera_task.images_data;
	C9: port reception_data	-> radio_task.reception_data;
	C10:port measured_data	-> data_distribution.measured_data;
	
end prs_bus_interface.impl;


-------------------------------------------------------------------
----------------------processor------------------------------------
-------------------------------------------------------------------
processor rs_6000
	features
	VME	: requires bus access VME;
	
end rs_6000;

processor implementation rs_6000.impl
	properties 
	scheduling_protocol => (RMS);
end rs_6000.impl;

------------------------------------------------------------------
----------------system--------------------------------------------
------------------------------------------------------------------
system sys_mars_pathfinder
end sys_mars_pathfinder;

system implementation sys_mars_pathfinder.impl
	subcomponents
	rs_6000				: processor rs_6000;
	PSC					: process PSC.impl;
	prs_bus_interface 	: process prs_bus_interface.impl;
	VME					: bus VME;
	bus_1553			: bus bus_1553;
	memories			: memory memories;
	
	radio				: device radio;
	-- measurement devices
	camera				: device camera;
	altimeter			: device altimeter;
	accelerometer		: device accelerometer;
	meterological		: device meteorological;
	sun_sensors			: device sun_sensors;
	star_analyser		: device star_analyser;
	-- control devices
	thrusters			: device thrusters;
	interface			: device interface;
	valves				: device valves;
	

	connections 
	P1: port prs_bus_interface.emission_data   -> radio.emission_data
	{ Actual_Connection_Binding => (reference (bus_1553));};
	P2: port prs_bus_interface.camera_control   -> camera.camera_control
	{ Actual_Connection_Binding => (reference (bus_1553));};
	P3: port prs_bus_interface.control_data   -> interface.control_data
	{ Actual_Connection_Binding => (reference (bus_1553));};
	
	P4: port camera.images_data -> prs_bus_interface.images_data
	{ Actual_Connection_Binding => (reference (bus_1553));};
	P5: port radio.reception_data -> prs_bus_interface.reception_data
	{ Actual_Connection_Binding => (reference (bus_1553));};
	P6: port valves.measured_data -> prs_bus_interface.measured_data
	{ Actual_Connection_Binding => (reference (bus_1553));};
	P7: port star_analyser.measured_data -> prs_bus_interface.measured_data
	{ Actual_Connection_Binding => (reference (bus_1553));};
	P8: port thrusters.measured_data -> prs_bus_interface.measured_data
	{ Actual_Connection_Binding => (reference (bus_1553));};
	P9: port sun_sensors.measured_data -> prs_bus_interface.measured_data
	{ Actual_Connection_Binding => (reference (bus_1553));};
	
	B1: bus access bus_1553	-> rs_6000.VME;
	B2: bus access bus_1553	-> camera.bus_1553;
	B3: bus access bus_1553	-> radio.bus_1553;
	B4: bus access bus_1553	-> valves.bus_1553;
	B5: bus access bus_1553	-> thrusters.bus_1553;
	B6: bus access bus_1553	-> sun_sensors.bus_1553;
	B7: bus access bus_1553	-> star_analyser.bus_1553;
	--B8: bus access bus_1553 -> interface.bus_1553;
	
	properties 
	Actual_processor_binding => (reference(rs_6000)) applies to PSC;
	Actual_processor_binding => (reference(rs_6000)) applies to prs_bus_interface;

end sys_mars_pathfinder.impl;

end mars_pathfinder;